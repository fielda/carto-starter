# You should read:
# https://github.com/danseely/cartodb-install/blob/master/PRODUCTION-DEPLOY.md
defaults: &defaults
  # If uncommented, most images like static map previews and twitter card
  # image urls will use these CDN urls.
  # #cdn_url:
  #  http:             "http.cdn.host"
  #  https:            "https.cdn.host"
  http_client_logs:   true
  ogr2ogr:
    binary:           'which ogr2ogr'
    csv_guessing:     true
  debug_assets:       true
  mandatory_keys:     [layer_opts, sql_api, varnish_management, redis, session_domain]
  # Historically, URLs were based on a `username.carto.com/PATH` schema.
  # When multi-user accounts were introduced, an alternate schema
  # `organizationname.carto.com/u/username/PATH` was added.
  #
  # To activate subdomainless urls, do NOT begin the session_domain value
  # with a dot.
  #
  # If you leave the dot at session_domain having subdomainless urls, you
  # will be forced to always have a subdomain. Any will do, but must be
  # present. If you remove the dot it will work as intended without any
  # subdomain.
  #
  # When subdomainless urls are used, organizations will be ignored from
  # the urls. In fact, typing whatever.carto.com/user/user1 and
  # carto.com/user/user1 is the same. The platform will replicate the sent
  # subdomain fragment to avoid CORS errors but no existing organization
  # checks will be performed.
  #
  # https://github.com/CartoDB/cartodb/blob/master/doc/manual/source/configuration.rst#domainless-urls
  # Do not include a port in session_domain.
  session_domain:     '.builder.example.org'
  # If subdomainless_urls is activated, urls will use usernames in format
  # //SESSION_DOMAIN/user/USERNAME and ignore subdomains if present.
  #
  # IMPORTANT: Using subdomainless urls will cause the app to IGNORE
  # organization info from the URL and thus no existing organization
  # checks will be performed!
  subdomainless_urls: false
  http_port:          # nil|integer. HTTP port to use when building urls. Leave empty to use default (80)
  https_port:         # nil|integer. HTTPS port to use when building urls. Leave empty to use default (443)
  # This secret is used to verify the integrity of signed cookies.
  # If you change it, all old signed cookies will become invalid.
  secret_token:       'cd46b5935e095b4c'
  # A port is fine to include in account_host.
  account_host:       'builder.example.org'
  # Here you can define other hosts different to account_host that also will be CORS enabled
  # cors_enabled_hosts:
  #   - example.com
  #   - foo.bar
  #   - carto.dev
  account_path:       '/account'
  # Apparently `visjson_cache_domains` is not used.
  # See https://groups.google.com/forum/#!topic/cartodb/cZ0km_xG3GE
  vizjson_cache_domains: ['.builder.example.org']
  data_library:
    username:         'common-data'
    path:             '/data-library'
  # Carto will look for the file below. If it exists, then /health will
  # return HTTP 500. https://github.com/CartoDB/cartodb/commit/9b9fd4c76a18e
  disable_file:       '~/disable'
  watcher:
    ttl:              60
  # `tiler` a synonym for 'Windshaft-cartodb'
  tiler:
    filter:           'mapnik'
    # This `internal` section is used for communications between the
    # Rails app and the tiler.
    internal:
      protocol:       'https'
      # If the domain is empty, it will autodetect (to the user subdomain).
      # https://github.com/CartoDB/cartodb/blob/788e5c9d9e/app/models/table.rb#L1628
      domain:         'map.example.org'
      port:           '443'
      # If host is empty, it will use domain.
      # https://github.com/CartoDB/cartodb/blob/master/lib/carto/named_maps/api.rb#L161
      host:           ''
      # This `verifycert` is used.
      # https://groups.google.com/forum/#!topic/cartodb/Uh0vw1IlcsI
      verifycert:      true
    # In this context, `private` means the embed is loaded via HTTPS.
    # This should point to an https tiler endpoint.
    # It is the address the client JS will use to communicate with Windshaft.
    private:
      protocol:       'https'
      # Use 'localhost' so that the client request will go
      # through Nginx.
      domain:         'map.example.org'
      port:           '443'
      # This `verifycert` is always ignored.
      verifycert:      true
    # In this context, `public` means HTTP. This configuration is used when
    # the embed is served via HTTP.
    public:
      # Use HTTPS no matter how the embed was served...
      protocol:       'https'
      domain:         'map.example.org'
      port:           '443'
      # This `verifycert` is always ignored.
      verifycert:      true
  # Note that the Rails app does not directly use the SQL API.
  sql_api:
    # In this context, `private` means HTTPS. This configuration is used when
    # the embed is served via HTTPS.
    private:
      protocol:       'https'
      domain:         'sql.example.org'
      # `endpoint` is ignored.
      # The app will always use /api/v2/sql
      endpoint:       '/api/v2/sql'
      port:           443
    # In this context, `public` means HTTP. This configuration is used when
    # the embed is served via HTTP.
    public:
      # Use HTTPS no matter how the embed was served...
      protocol:       'https'
      domain:         'sql.example.org'
      # `endpoint` is ignored.
      # The app will always use /api/v2/sql
      endpoint:       '/api/v2/sql'
      port:           443
  api_requests_service_url: ''
  # Developers host URL is only related to documentation and can be safely ignored.
  developers_host:    'https://example.com'
  google_analytics:
    primary:          ''
    embeds:           ''
    domain:           ''
  google_tag_manager:
    primary:          ''
    embeds:           ''
  # Errors are reported on the console if Rollbar is not enabled.
  # https://github.com/CartoDB/cartodb/commit/fc58ce96e5c260c6
  # https://rollbar.com/
  rollbar_api_key: ''
  tumblr:
    api_key: ''
  trackjs:
    enabled: false
    customer: ''
    app_keys:
      editor: ''
      embeds: ''
  #fullstory:
    #org: 'XXXXX'
  facebook:
    app_id: ''
    admins: ''
  hubspot: ''
  segment:
    api_key:
  passwords:
    expiration_in_d:
  # metrics:
  #   hubspot:
  #     events_host: 'https://track.hubspot.example.com'
  #     token: ''
  #     form_ids:
  #       newsletter: ''
  #     event_ids:
  #       import_failed: ''
  #       geocoding_failed: ''
  #       import_success: ''
  #       geocoding_success: ''
  #       published_visualization: ''
  #       visited_dashboard: ''
  #       connect_dataset: ''
  #       create_map: ''
  #       export_table: ''
  #       export_map: ''
  #       export_public_map: ''
  #       select_wms: ''
  #       color_basemap: ''
  #       pattern_basemap: ''
  #       geocoding: ''
  #       visual_merge: ''
  #       common_data: ''
  #       cartocss_manually: ''
  #       wizard: ''
  #       filter: ''
  #       query: ''
  #       applied_sql: ''
  #       applied_cartocss: ''
  #       modified_style_form: ''
  #       completed_connection: ''
  #       failed_connection: ''
  #       created_analysis: ''
  #       modified_analysis: ''
  #       published_map: ''
  #       exported_map: ''
  #     mailing_track:
  #       like_map: ''
  #       trending_map: ''
  # Carto uses a visualizations API to retrieve all the public datasets
  # from a defined user and serve them as importable datasets to all the
  # users of the platform through the data library options.
  #
  # For common_data, use https://common-data.carto.com as the base_url to
  # retrieve all the public datasets from that user.
  #
  # This is the default behaviour in CartoDB, but if you want to use your
  # own system and user for this purpose you have to define the username
  # property pointing to the user that will provide the datasets in your own
  # instance. The URL in this case is going to be built using your instance
  # base url. -- http://cartodb.readthedocs.io/en/latest/configuration.html
  common_data:
    protocol: 'https'
    username: 'common-data'
    # base_url: 'https://common-data.carto.com' # Not needed, see above.
    format: 'shp'
    generate_every: 86400
  explore_api:
    username: ''
  # TODO: Install the dataservices API and uncomment lines below...
  # aggregation_tables:
  #   host: 'carto_postgres'
  #   port: '5432'
  #   dbname: 'dataservices_db'
  #   username: 'geocoder_api'
  #   password: ''
  #   tables:
  #     admin0: 'ne_admin0_v3'
  #     admin1: 'global_province_polygons'
  reports:
    # This is to setup a daily email report of trending maps.
    mail_to: ''
  mailer:
    from: 'Admin <support@example.com>'
    address: ''
    port: ''
    user_name: ''
    password: ''
    authentication: ''
    enable_starttls_auto: ''
  varnish_management:
    critical: false
    host: '127.0.0.1'
    port: 6082
    purge_command: 'purge'
    retries: 5
    timeout: 5
    # 'warning' or 'error'
    trigger_verbose: true
  invalidation_service:
    enabled: false
    host: '127.0.0.1'
    port: 3142
    retries: 5 # number of retries before considering failure
    critical: false # either the failure is considered an error or a warning
    timeout: 5 # socket timeout
    trigger_verbose: true
  redis:
    host: 'redis' # See docker-compose.yml
    port: 6379
    connect_timeout: 2
    read_timeout: 3
    write_timeout: 5
    databases:
      tables_metadata:     0
      api_credentials:     3
      users_metadata:      5
      redis_migrator_logs: 6
      limits_metadata:     8
    # secondary:
    #   host: '127.0.0.1'
  org_metadata_api:
    # This host is used for some connections FROM the database TO the
    # Rails server. Set it to whatever allows access from the database host
    # to the Rails server.
    host: 'carto_builder_host_from_db_perspective'
    port: '3000'
    username: "extension"
    password: "bitcoin legend 8"
    timeout: 10
  # The app does not require auth on superadmin endpoints when Rails
  # environment is "development".
  # https://groups.google.com/forum/#!topic/cartodb/TTpp0cMWx64
  superadmin:
    username: "dev" # was: "superadmin"
    password: "bitcoin legend 8"
  geocoder:
    #force_batch: true
    #disable_cache: true
    app_id: ''
    token:  ''
    mailto: ''
    base_url: ''
    non_batch_base_url: ''
    internal:
      username: ''
      api_key: ''
    cache:
      base_url: ''
      api_key: ''
      table_name: ''
    mapzen:
      search_bar_api_key: ''
    mapbox:
      search_bar_api_key: ''
    # TODO: Install the dataservices API and uncomment lines below...
    # api:
    #   host: 'carto_postgres'
    #   port: '5432'
    #   dbname: 'dataservices_db'
    #   user: 'geocoder_api'
  user_migrator:
    user_exports_folder: '/tmp/user_exports'
    user_imports_folder: '/tmp/user_imports'
    s3:
      access_key_id: 'AKIAI-FAKE-KEY-2CHZA'
      secret_access_key: 'Zm9sAqT-FAKE-KEY-QrkQSK/Zr'
      bucket_name: 'uploads.example.com'
      url_ttl: 7200
      async_long_uploads: false
      region: 'us-east-1'
    uploads_path: 'public/uploads'
    pg_dump_bin_path:
      '9.5': 'pg_dump'
      '10': 'pg_dump'
    pg_restore_bin_path:
      '9.5': 'pg_restore'
      '10': 'pg_restore'
  # For visualization (viz) exports...
  exporter:
    exporter_temporal_folder: '/tmp/exporter'
    s3:
      access_key_id: 'AKIAI-FAKE-KEY-2CHZA'
      secret_access_key: 'Zm9sAqT-FAKE-KEY-QrkQSK/Zr'
      bucket_name: 'uploads.example.com'
      url_ttl: 7200
      async_long_uploads: false
      # `s3_endpoint` info at https://github.com/CartoDB/cartodb/pull/11614
      s3_endpoint: ''
      region: 'us-east-1'
    uploads_path: 'public/uploads' # including 'uploads' assumes public path. Absolute path example: /tmp/exports/downloads
  # For imports like CSV files and zipped shapefiles...
  importer:
    # Blacklisting info at: https://github.com/CartoDB/cartodb/pull/6509
    blacklisted_ip_addr: []
    content_guessing:        # Depends on geocoding
      enabled:         false # Disabled if false or not present
      threshold:       0.9   # 90% or more matches
      minimum_entropy: 0.9   # Normalized entropy, between 0.0 and 1.0. See http://en.wikipedia.org/wiki/Entropy_(information_theory)
      sample_size:     400   # +-5% error. See http://en.wikipedia.org/wiki/Sample_size_determination#Estimating_proportions_and_means
    s3:
      access_key_id: 'AKIAI-FAKE-KEY-2CHZA'
      secret_access_key: 'Zm9sAqT-FAKE-KEY-QrkQSK/Zr'
      bucket_name: 'uploads.example.com'
      url_ttl:
      async_long_uploads: false
      proxy_uri:
      s3_endpoint: '' # :use_ssl has been removed. Version 2 uses SSL everywhere. To disable SSL you must configure an :endpoint that uses http://.
      region: 'us-east-1'

    unp_temporal_folder: '/tmp/imports/'
    # It must end in `/uploads` and be accessible via HTTP, if relative will
    # default to Rails.Root/#{uploads_path}
    uploads_path: 'public/uploads'
  error_track:
    url: 'https://viz2.example.com/api/v1/sql'
    percent_users: 10
  # graphite endpoint used to post frontend stats
  graphite_public:
    host: ""
    port:
  layer_opts:
    public_opts: ["type", "active", "query", "opacity", "auto_bound",
                  "interactivity", "debug", "visible", "tiler_domain",
                  "tiler_port", "tiler_protocol", "sql_domain", "sql_port",
                  "sql_protocol", "extra_params", "table_name",
                  "user_name", "style_version", "tile_style", "query_wrapper"]
    default_tile_styles:
      point: "{\n  marker-fill: #FF6600;\n  marker-opacity: 0.9;\n  marker-width: 12;\n  marker-line-color: white;\n  marker-line-width: 3;\n  marker-line-opacity: 0.9;\n  marker-placement: point;\n  marker-type: ellipse;\n  marker-allow-overlap: true;\n}"
      geometry: "{\n // points\n [mapnik-geometry-type=point] {\n    marker-fill: #FF6600;\n    marker-opacity: 1;\n    marker-width: 12;\n    marker-line-color: white;\n    marker-line-width: 3;\n    marker-line-opacity: 0.9;\n    marker-placement: point;\n    marker-type: ellipse;marker-allow-overlap: true;\n  }\n\n //lines\n [mapnik-geometry-type=linestring] {\n    line-color: #FF6600; \n    line-width: 2; \n    line-opacity: 0.7;\n  }\n\n //polygons\n [mapnik-geometry-type=polygon] {\n    polygon-fill:#FF6600;\n    polygon-opacity: 0.7;\n    line-opacity:1;\n    line-color: #FFFFFF;\n   }\n }"
      polygon: "{\n  polygon-fill:#FF6600;\n  polygon-opacity: 0.7;\n  line-opacity:1;\n  line-color: #FFFFFF;\n}"
      multipolygon: "{\n  polygon-fill:#FF6600;\n  polygon-opacity: 0.7;\n  line-opacity:1;\n  line-color: #FFFFFF;\n}"
      multilinestring: "{\n  line-color:#FF6600;\n  line-width:1;\n  line-opacity: 0.7;\n}"
    data:
      kind: "carto"
      # These option configs are included
      # in the /api/v1/maps/[UUID]/layers/[UUID] response...
      options:
        # attribution:        'CARTO attribution'
        query:              ""
        opacity:            0.99
        auto_bound:         false
        interactivity:      "cartodb_id"
        debug:              false
        visible:            true
        tiler_domain:       "map.example.org"
        tiler_port:         "443"
        tiler_protocol:     "https"
        sql_domain:         "sql.example.org"
        sql_port:           "443"
        sql_protocol:       "https"
        extra_params:       { cache_policy: 'persist' }
        tile_style_history: []
        style_version:      "2.1.1"
      infowindow:
        template_name:      "table/views/infowindow_light"
    background:
      kind: "background"
      options: { color: '#ffffff' }
  # Keep hosted true for local dev & open source installations.
  # https://groups.google.com/forum/#!topic/cartodb/OHuqka8ipds
  cartodb_com_hosted: true
  cartodb_central_domain_name: 'example.com'
  aws:
    s3:
      access_key_id: 'AKIAI-FAKE-KEY-2CHZA'
      secret_access_key: 'Zm9sAqT-FAKE-KEY-QrkQSK/Zr'
      region: 'us-east-1'
  assets:
    # User uploaded logos and markers will be saved here...
    s3_bucket_name: "uploads.example.com"
    max_file_size: 5242880 # 5.megabytes
    region: 'us-east-1'
    # Example for configuring organization assets.
    # If 'aws.s3' configuration exists, S3 is used for storing assets and 'assets.organization.bucket' value is required. If 'aws.s3' config is not present, assets will be stored locally.
    organization:
      bucket: "uploads.example.com" # Required if 'aws.s3' config is present. Bucket must exist beforehand. If no 'aws.s3' config is present, organization assets will be stored locally and this line is not needed.
      max_size_in_bytes: 1048576 # Optional, default is 1 MB
      location: 'organization_assets' # Optional subdirectory for local assets, default is 'organization_assets'
  # Commenting out app_assets will cause the app to use the local grunt built files.
  # https://github.com/CartoDB/cartodb/blob/master/CONTRIBUTING.md
  # app_assets:
  #   asset_host: "//cartodb-libs.global.ssl.fastly.net/cartodbui"
  avatars:
    gravatar_enabled: false
    base_url: '/assets/unversioned/images/avatars'
    kinds: ['marker', 'mountain', 'pacman', 'planet', 'star']
    colors: ['green', 'orange', 'red', 'yellow']
  dropbox_api_key: ""
  gdrive:
    api_key: ""
    app_id: ""
  # This enables a support chat within editor
  # Use your Olark api id to enable it.
  # If you remove this entry or don't define an app key, it won't be activated.
  olark:
    app_id: ''
  enforce_non_empty_layer_css: false
  users_dumps:
    service:
      port: 00000
  # http://cartodb.readthedocs.io/en/latest/operations/http_headers_authentication.html
  http_header_authentication:
    header: # name of the trusted, safe header that your server adds to the request
    field: # 'email' / 'username' / 'id' / 'auto' (autodetection)
    autocreation: # true / false (true requires field to be email)
  oauth:
    # If the client_id/app_key is not set won't appear at the UI. @see application_helper.rb -> frontend_config
    # Must be the same as CartoDB::Datasources::xxxx DATASOURCE_NAME constants
    gdrive:
      application_name:     ''
      client_id:            ''
      client_secret:        ''
      callback_url:         'https://example.com'
    # google_plus:
      # client_id: ''
      # cookie_policy: 'single_host_origin'
      # cookie_policy: 'https://staging.example.com'
    github:
      client_id:            ''
      client_secret:        ''
    dropbox:
      app_key:              ''
      app_secret:           ''
      callback_url:         ''
    box:
      application_name:     ''
      client_id:            ''
      client_secret:        ''
      box_host:             "app.box.com"
    instagram:
      app_key:              ''
      app_secret:           ''
      callback_url:         ''
    # Mailchimp datasource. Setup at https://admin.mailchimp.com/account/oauth2/ then fill here.
    # If fields are present but empty, option won't appear at editor import window
    mailchimp:
      app_key:              ''
      app_secret:           ''
      callback_url:         ''
  datasource_search:
    # Must be the same as CartoDB::Datasources::xxxx DATASOURCE_NAME constants
    twitter_search:
      standard:
        auth_required:          false
        username:               ''
        password:               ''
        search_url:             'https://fake.url.nil'
        ratelimit_active:       true
        ratelimit_concurrency:  8
        ratelimit_ttl:          4
        ratelimit_wait_secs:    0.5
      customized_user_list:     []
      customized_orgs_list:     []
      entity_to_config_map:     [] # { user_or_org_name: 'custom_config_name'}
      customized:
        custom1:
            auth_required:          false
            username:               ''
            password:               ''
            search_url:             'https://fake.url.nil'
            ratelimit_active:       false
            ratelimit_concurrency:  3
            ratelimit_ttl:          4
            ratelimit_wait_secs:    0.1
  datasources:
    arcgis_enabled: true
    salesforce_enabled: true
  basemaps:
    # Carto Basemaps, Terms of Service:
    # -- For raster basemaps you can make use of them directly without an API KEY.
    # -- For vector basemaps you will need to get an API Key from Mapzen.
    # You will need a commercial API KEY in case of:
    # 1. You use the basemap service for commercial purposes.
    #    The basemap is used inside an application or website that requires
    #    payment, is private or is used for asset-tracking.
    # 2. You require a Service Level Agreement on the basemap service. We do
    #    not provide any SLA’s on our free offering.
    # 3. You require more than 75,000 mapviews per month, which is the limit
    #    for our free service.
    # 4. You require a custom map design. On our free service we provide 2 map
    #    designs, Dark Matter and Positron for raster.
    CARTO:
      voyager_labels:
        default: true
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Voyager'
        className: 'voyager_labels'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
        labels:
          urlTemplate: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_only_labels/{z}/{x}/{y}.png'
          urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_only_labels/{z}/{x}/{y}@2x.png'
      positron_rainbow_labels:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Positron'
        className: 'positron_rainbow_labels'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
        labels:
          urlTemplate: 'https://{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}.png'
          urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}@2x.png'
      dark_matter_rainbow_labels:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Dark matter'
        className: 'dark_matter_rainbow_labels'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
        labels:
          urlTemplate: 'https://{s}.basemaps.cartocdn.com/dark_only_labels/{z}/{x}/{y}.png'
          urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/dark_only_labels/{z}/{x}/{y}@2x.png'
      voyager:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Voyager (labels below)'
        className: 'voyager'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      positron_rainbow:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Positron (labels below)'
        className: 'positron_rainbow'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      dark_matter_rainbow:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Dark matter (labels below)'
        className: 'dark_matter_rainbow'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      voyager_lite:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Voyager (lite)'
        className: 'voyager_lite'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      positron_lite_rainbow:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Positron (lite)'
        className: 'positron_lite_rainbow'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      dark_matter_lite_rainbow:
        urlTemplate: 'https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}.png'
        urlTemplate2x: 'https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}@2x.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Dark matter (lite)'
        className: 'dark_matter_lite_rainbow'
        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      eco_cartodb:
        urlTemplate: 'https://cartocdn_{s}.global.ssl.fastly.net/base-eco/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '10'
        name: 'CARTO World Eco'
        className: 'eco_cartodb'
        attribution: ''
      flat_blue:
        urlTemplate: 'https://cartocdn_{s}.global.ssl.fastly.net/base-flatblue/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '10'
        name: 'CARTO World Flat Blue'
        className: 'flat_blue'
        attribution: ''
      midnight_cartodb:
        urlTemplate: 'https://cartocdn_{s}.global.ssl.fastly.net/base-midnight/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '10'
        name: 'CARTO World Midnight Commander'
        className: 'midnight_cartodb'
        attribution: ''
      antique_cartodb:
        urlTemplate: 'https://cartocdn_{s}.global.ssl.fastly.net/base-antique/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: 0
        maxZoom: 10
        name: 'CARTO World Antique'
        className: 'antique_cartodb'
        attribution: ''
    Stamen:
      toner_stamen_labels:
        urlTemplate: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Toner'
        className: 'toner_stamen_labels'
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
        labels:
          urlTemplate: 'http://{s}.tile.stamen.com/toner-labels/{z}/{x}/{y}.png'
      toner_stamen:
        urlTemplate: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Toner (labels below)'
        className: 'toner_stamen'
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
      toner_background_stamen:
        urlTemplate: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Toner Background'
        className: 'toner_background_stamen'
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
      toner_lite_stamen:
        urlTemplate: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Toner Lite'
        className: 'toner_lite_stamen'
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
      toner_lines_stamen:
        urlTemplate: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lines/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Toner Lines'
        className: 'toner_lines_stamen'
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
      toner_hybrid_stamen:
        urlTemplate: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner-hybrid/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Toner Hybrid'
        className: 'toner_hybrid_stamen'
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
      watercolor_stamen:
        urlTemplate: 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png'
        subdomains: 'abcd'
        minZoom: '0'
        maxZoom: '18'
        name: 'Watercolor'
        className: 'watercolor_stamen'
        attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
    GMaps:
      roadmap:
        name: 'GMaps Roadmap'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        className: 'googlemaps'
        style: '[]'
        default: true
      hybrid:
        name: 'GMaps Hybrid'
        maxZoom: 40
        minZoom: 0
        baseType: 'hybrid'
        className: 'googlemaps'
        style: '[]'
      satellite:
        name: 'GMaps Satellite'
        maxZoom: 40
        minZoom: 0
        baseType: 'satellite'
        className: 'googlemaps'
        style: '[]'
      terrain:
        name: 'GMaps Terrain'
        maxZoom: 40
        minZoom: 0
        baseType: 'terrain'
        className: 'googlemaps'
        style: '[]'
      gray_roadmap:
        name: 'GMaps Gray Roadmap'
        maxZoom: 40
        minZoom: 0
        baseType: 'gray_roadmap'
        className: 'googlemaps'
        style: '[{ "stylers": [ { "saturation": -100 } ] },{ "featureType": "water", "stylers": [ { "gamma": 1.67 }, { "lightness": 27 } ] },{ "elementType": "geometry", "stylers": [ { "gamma": 1.31 }, { "lightness": 12 } ] },{ "featureType": "administrative", "elementType": "labels", "stylers": [ { "lightness": 51 }, { "gamma": 0.94 } ] },{ },{ "featureType": "road", "elementType": "labels", "stylers": [ { "lightness": 57 } ] },{ "featureType": "poi", "elementType": "labels", "stylers": [ { "lightness": 42 } ] }]'
      cool_grey:
        name: 'GMaps cool grey'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'cool_grey'
        className: 'googlemaps'
        style: '[{"featureType":"landscape","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"water","stylers":[{"visibility":"on"},{"color":"#ffffff"}]},{"featureType":"road","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"stylers":[{"hue":"#00aaff"},{"saturation":-100},{"gamma":2.15},{"lightness":12}]},{"featureType":"road","elementType":"labels.text.fill","stylers":[{"visibility":"on"},{"lightness":24}]},{"featureType":"road","elementType":"geometry","stylers":[{"lightness":57}]}]'
      clean_grey:
        name: 'GMaps clean grey'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'clean_grey'
        className: 'googlemaps'
        style: '[{"featureType":"administrative","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"administrative.country","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"administrative.province","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"visibility":"on"},{"color":"#e3e3e3"}]},{"featureType":"landscape.natural","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"all","stylers":[{"color":"#cccccc"}]},{"featureType":"road","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"transit.station.airport","elementType":"geometry","stylers":[{"visibility":"off"}]},{"featureType":"transit.station.airport","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#FFFFFF"}]},{"featureType":"water","elementType":"labels","stylers":[{"visibility":"off"}]}]'
      shades_grey:
        name: 'GMaps shades of grey'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'shades_grey'
        className: 'googlemaps'
        style: '[{"featureType":"all","elementType":"labels.text.fill","stylers":[{"saturation":36},{"color":"#000000"},{"lightness":40}]},{"featureType":"all","elementType":"labels.text.stroke","stylers":[{"visibility":"on"},{"color":"#000000"},{"lightness":16}]},{"featureType":"all","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"administrative","elementType":"geometry.fill","stylers":[{"color":"#000000"},{"lightness":20}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"color":"#000000"},{"lightness":17},{"weight":1.2}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":20}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":21}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#000000"},{"lightness":17}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#000000"},{"lightness":29},{"weight":0.2}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":18}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":16}]},{"featureType":"transit","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":19}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#000000"},{"lightness":17}]}]'
      neutral_blue:
        name: 'GMaps neutral blue'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'neutral_blue'
        className: 'googlemaps'
        style: '[{"featureType":"water","elementType":"geometry","stylers":[{"color":"#193341"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"color":"#2c5a71"}]},{"featureType":"road","elementType":"geometry","stylers":[{"color":"#29768a"},{"lightness":-37}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#406d80"}]},{"featureType":"transit","elementType":"geometry","stylers":[{"color":"#406d80"}]},{"elementType":"labels.text.stroke","stylers":[{"visibility":"on"},{"color":"#3e606f"},{"weight":2},{"gamma":0.84}]},{"elementType":"labels.text.fill","stylers":[{"color":"#ffffff"}]},{"featureType":"administrative","elementType":"geometry","stylers":[{"weight":0.6},{"color":"#1a3541"}]},{"elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#2c5a71"}]}]'
      cleaner_midnight:
        name: 'GMaps cleaner midnight'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'cleaner_midnight'
        className: 'googlemaps'
        style: '[{"featureType":"all","elementType":"labels.text.fill","stylers":[{"color":"#ffffff"},{"weight":"0.20"},{"lightness":"28"},{"saturation":"23"},{"visibility":"off"}]},{"featureType":"all","elementType":"labels.text.stroke","stylers":[{"color":"#494949"},{"lightness":13},{"visibility":"off"}]},{"featureType":"all","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"administrative","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"color":"#144b53"},{"lightness":14},{"weight":1.4}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#08304b"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#0c4152"},{"lightness":5}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#0b434f"},{"lightness":25}]},{"featureType":"road.arterial","elementType":"geometry.fill","stylers":[{"color":"#000000"}]},{"featureType":"road.arterial","elementType":"geometry.stroke","stylers":[{"color":"#0b3d51"},{"lightness":16}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#000000"}]},{"featureType":"transit","elementType":"all","stylers":[{"color":"#146474"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#021019"}]}]'
      icy_blue:
        name: 'GMaps icy blue'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'icy_blue'
        className: 'googlemaps'
        style: '[{"stylers":[{"hue":"#2c3e50"},{"saturation":250}]},{"featureType":"road","elementType":"geometry","stylers":[{"lightness":50},{"visibility":"simplified"}]},{"featureType":"road","elementType":"labels","stylers":[{"visibility":"off"}]}]'
      red_hues:
        name: 'GMaps red hues'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'red_hues'
        className: 'googlemaps'
        style: '[{"stylers":[{"hue":"#dd0d0d"}]},{"featureType":"road","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"geometry","stylers":[{"lightness":100},{"visibility":"simplified"}]}]'
      light_green:
        name: 'GMaps light green'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'light_green'
        className: 'googlemaps'
        style: '[{"stylers":[{"hue":"#baf4c4"},{"saturation":10}]},{"featureType":"water","stylers":[{"color":"#effefd"}]},{"featureType":"all","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"administrative","elementType":"labels","stylers":[{"visibility":"on"}]},{"featureType":"road","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]}]'
      mostly_grayscale:
        name: 'GMaps mostly grayscale'
        maxZoom: 40
        minZoom: 0
        baseType: 'roadmap'
        baseName: 'mostly_grayscale'
        className: 'googlemaps'
        style: '[{"featureType":"administrative","elementType":"all","stylers":[{"visibility":"on"},{"lightness":33}]},{"featureType":"administrative","elementType":"labels","stylers":[{"saturation":"-100"}]},{"featureType":"administrative","elementType":"labels.text","stylers":[{"gamma":"0.75"}]},{"featureType":"administrative.neighborhood","elementType":"labels.text.fill","stylers":[{"lightness":"-37"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"color":"#f9f9f9"}]},{"featureType":"landscape.man_made","elementType":"geometry","stylers":[{"saturation":"-100"},{"lightness":"40"},{"visibility":"off"}]},{"featureType":"landscape.natural","elementType":"labels.text.fill","stylers":[{"saturation":"-100"},{"lightness":"-37"}]},{"featureType":"landscape.natural","elementType":"labels.text.stroke","stylers":[{"saturation":"-100"},{"lightness":"100"},{"weight":"2"}]},{"featureType":"landscape.natural","elementType":"labels.icon","stylers":[{"saturation":"-100"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"saturation":"-100"},{"lightness":"80"}]},{"featureType":"poi","elementType":"labels","stylers":[{"saturation":"-100"},{"lightness":"0"}]},{"featureType":"poi.attraction","elementType":"geometry","stylers":[{"lightness":"-4"},{"saturation":"-100"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#c5dac6"},{"visibility":"on"},{"saturation":"-95"},{"lightness":"62"}]},{"featureType":"poi.park","elementType":"labels","stylers":[{"visibility":"on"},{"lightness":20}]},{"featureType":"road","elementType":"all","stylers":[{"lightness":20}]},{"featureType":"road","elementType":"labels","stylers":[{"saturation":"-100"},{"gamma":"1.00"}]},{"featureType":"road","elementType":"labels.text","stylers":[{"gamma":"0.50"}]},{"featureType":"road","elementType":"labels.icon","stylers":[{"saturation":"-100"},{"gamma":"0.50"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#c5c6c6"},{"saturation":"-100"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"lightness":"-13"}]},{"featureType":"road.highway","elementType":"labels.icon","stylers":[{"lightness":"0"},{"gamma":"1.09"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#e4d7c6"},{"saturation":"-100"},{"lightness":"47"}]},{"featureType":"road.arterial","elementType":"geometry.stroke","stylers":[{"lightness":"-12"}]},{"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"saturation":"-100"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#fbfaf7"},{"lightness":"77"}]},{"featureType":"road.local","elementType":"geometry.fill","stylers":[{"lightness":"-5"},{"saturation":"-100"}]},{"featureType":"road.local","elementType":"geometry.stroke","stylers":[{"saturation":"-100"},{"lightness":"-15"}]},{"featureType":"transit.station.airport","elementType":"geometry","stylers":[{"lightness":"47"},{"saturation":"-100"}]},{"featureType":"water","elementType":"all","stylers":[{"visibility":"on"},{"color":"#acbcc9"}]},{"featureType":"water","elementType":"geometry","stylers":[{"saturation":"53"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"lightness":"-42"},{"saturation":"17"}]},{"featureType":"water","elementType":"labels.text.stroke","stylers":[{"lightness":"61"}]}]'
  overviews:
    min_rows: 2000000
    statement_timeout: 1800000
    tolerance_px: 1.0
  connectors:
    odbc:
      enabled: false
      max_rows: nil
    mysql:
      enabled: true
      max_rows: 500000
    postgresql:
      enabled: true
      max_rows: 500000
    hive:
      enabled: false
      max_rows: 500000
    sqlserver:
      enabled: false
      max_rows: 500000
  enforce_non_empty_layer_css: false
  dataservices:
    enabled:
        geocoder_internal: false
        hires_geocoder: false
        isolines: false
        routing: false
        data_observatory: false

development:
  <<: *defaults
  varnish_management:
    critical: false
    host: '127.0.0.1'
    port: 6082
    purge_command: 'purge'
    url_purge_command: 'url.purge'
    retries: 5
    timeout: 5

test:
  <<: *defaults
  http_port: 53716
  redis:
    host: 'redis'
    port: 6335
  enforce_non_empty_layer_css: false
  api_requests_es_service:
    url: "https://api-calls-service.builder.example.org/search"
    body: ""

staging:
  <<: *defaults

production:
  <<: *defaults
